'use client'

import { useState } from 'react';
import { useParams } from 'next/navigation';
import LoadingOverlay from './LoadingOverlay';

export default function SOAPForm() {
  const { citizen_id } = useParams();

  const [formData, setFormData] = useState({
    subjective: '',
    objective: '',
    assessment: '',
    plan: '',
  });

  const [success, setSuccess] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setSuccess('');
    setError('');
    if (
        !formData.subjective ||
        !formData.objective ||
        !formData.assessment ||
        !formData.plan
      ) {
        setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á');
        setLoading(false);
        return;
      }

    try {
      const res = await fetch('/api/add_SOAP', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          critizen_id: citizen_id,
          soap: {
            subjective: formData.subjective,
            objective: formData.objective,
            assessment: formData.assessment,
            plan: formData.plan,
          },
        }),
      });

      const data = await res.json();
      if (res.ok) {
        setSuccess('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å SOAP ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
        setFormData({
          subjective: '',
          objective: '',
          assessment: '',
          plan: '',
        });
      } else {
        setError(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å');
      }
    } catch (err) {
      console.error('Submit error:', err);
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    } finally {
      setLoading(false);
    }
  };
  

  return (
    <div className='relative'>
    {loading && <LoadingOverlay />}
    <div className="max-w-2xl mx-auto mt-10 p-6 bg-white rounded-xl shadow-md">
        
      <form onSubmit={handleSubmit} className="space-y-6">
        <h2 className="text-xl font-semibold text-gray-700">üìù ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å SOAP</h2>

        {success && <p className="text-green-600 text-sm">{success}</p>}
        {error && <p className="text-red-600 text-sm">{error}</p>}

        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Subjective (‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏•‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á)
          </label>
          <textarea
            name="subjective"
            rows={3}
            value={formData.subjective}
            onChange={handleChange}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß ‡πÑ‡∏≠ ‡πÄ‡∏à‡πá‡∏ö‡∏Ñ‡∏≠..."
            className="w-full px-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-200"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Objective (‡∏ú‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢/‡∏ú‡∏•‡πÅ‡∏•‡πá‡∏ö)
          </label>
          <textarea
            name="objective"
            rows={3}
            value={formData.objective}
            onChange={handleChange}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ß‡∏±‡∏î‡πÑ‡∏Ç‡πâ 38.5¬∞C ‡πÄ‡∏™‡∏°‡∏´‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß..."
            className="w-full px-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-200"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Assessment (‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÇ‡∏£‡∏Ñ)
          </label>
          <textarea
            name="assessment"
            rows={2}
            value={formData.assessment}
            onChange={handleChange}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤, ‡∏´‡∏•‡∏≠‡∏î‡∏•‡∏°‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö..."
            className="w-full px-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-200"
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-600 mb-1">
            Plan (‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤)
          </label>
          <textarea
            name="plan"
            rows={3}
            value={formData.plan}
            onChange={handleChange}
            placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡πÄ‡∏ã‡∏ï‡∏≤‡∏°‡∏≠‡∏•, ‡∏ô‡∏±‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£ 3 ‡∏ß‡∏±‡∏ô"
            className="w-full px-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-indigo-200"
          />
        </div>

        <button
          type="submit"
          disabled={loading}
          className={`w-full py-2 rounded-md text-white transition-colors cursor-pointer ${
            loading ? 'bg-gray-400 cursor-not-allowed' : 'bg-black hover:bg-gray-800'
          }`}
        >
          {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å SOAP'}
        </button>
      </form>
    </div>
    </div>
  );
}
